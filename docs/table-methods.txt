


  DECOR APPLICATION MACHINERY
  2014-2023 (c) Vladi Belperchinov-Shabanski "Cade"

  TABLE METHODS

  Table methods are defined in the same place where table definition are
  stored:

      $(DECOR_CORE_ROOT)/apps/<app_name>/core/tables

  Methods files are perl modules, named with the same table name but with .pm
  extension:

      $(DECOR_CORE_ROOT)/apps/<app_name>/core/tables/test_table.def
      $(DECOR_CORE_ROOT)/apps/<app_name>/core/tables/test_table.pm

  Table methods file must have the following package:

      package decor::tables::<table_name>

  All methods are named with lower case letters and must start with "on_".
  Example tables method file looks like this:

      package decor::tables::test1;
      use strict;

      use Data::Dumper;

      sub on_recalc
      {
        my $current_record = shift;
        ...
      }

      sub on_insert
      {
        my $current_record = shift;
        ...
      }

      sub on_update
      {
        my $current_record = shift;
        ...
      }

      sub on_access
      {
        my $current_record = shift;
        my $operation      = shift;
        ...
      }

      1;

  Methods can be manually called on any record:

      $any_record->method( 'METHOD_NAME' );

  Methods can receive any number of arguments:

      $any_record->method( 'METHOD_NAME', ARGS_LIST );

  Decor system methods are:

      INIT      -- called only once, first of all, when INSERT new data
      RECALC    -- called on each page refresh on any INSERT or UPDATE screen
      INSERT    -- called before new record insert
      UPDATE    -- called before existing method update
      ACCESS    -- called whenever operation needs to be checked if is allowed 
                   on existing record
      DO_XXX    -- called on each "DO" processing ("XXX" is the specific DO name)
      FILE_SAVE -- called before saving file/file info to the database

  There are separate RECALC methods which are used separately for insert and
  update and are called right after RECALC:
  
      RECALC_INSERT  -- called right after RECALC on inserting records
      RECALC_UPDATE  -- called right after RECALC on updating  records
      
  Also there are post-saving methods for all methods which save data to the
  database. Those are:
  
      POST_INSERT    -- called right after saving new record to the database
      POST_UPDATE    -- called right after updating record data in the database
      POST_DO_XXX    -- called right after executing DO named "XXX" and possibly
                        saving current record data.
      POST_FILE_SAVE -- called right after saving file and file info to the
                        database
                        
  All POST_* methods are intended to update other records related somehow to 
  the currently saved record.

  Note that RECALC method is used only for user feedback! No data calculated
  by the RECALC will be passed back to INSERT or UPDATE methods. If INSERT
  or UPDATE methods need RECALC first, it is needed to be called manually:

      package decor::tables::test1;
      use strict;

      use Data::Dumper;

      sub on_recalc
      {
        my $current_record = shift;
        ...
      }

      sub on_insert
      {
        my $current_record = shift;
        $current_record->method( 'RECALC' );
        # or even with:
        # on_recalc( $current_record );
      }

      sub on_update
      {
        my $current_record = shift;
        $current_record->method( 'RECALC' );
        # or even with:
        # on_recalc( $current_record );
      }

      1;


  Calling directly method handlers like "on_recalc( $current_record )" must
  be used only inside methods modules. In any other place record's "method"
  interface must be used!
  
  ACCESS method gets two arguments, the current record and the operation name
  to be checked. Operation name is one of 'READ', 'UPDATE', 'DELETE'. If this
  method exists and gets executed, this means that all other checks passed and
  only this method decides if operation should be allowed. If method exits
  with "TRUE" result (any positive number or non-empty string) and without 
  rising any exception, operation will be allowed. If method returns false or
  rises an exception, operation will be denied.
  
  ACCESS method is usually called from the client interfaces (WEB interface
  for example) to decide if current operation should be presented to the user 
  as allowed. In the WEB interface, it is called when existing record is 
  about to be updated or deleted and if denied, no controls and/or buttons for
  executing the operation will be shown on the screen.
  



  FIXME: TODO: special methods ON_FILTER_METHOD_*

--

