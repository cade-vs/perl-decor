


  DECOR APPLICATION MACHINERY
  2014-2019 (c) Vladi Belperchinov-Shabanski "Cade"


  ============================================================================
  FIELD TYPES
  ============================================================================
  
  available field types are:
  
  "char"
  
      CHAR types take one argument, which is maximum field length.
      it holds arbitrary text data.
      
      argument is optional and has default value of 256
  
  "int"
  
      INT takes one argument, which is maximum number digits.
      it holds any integer number (either negative, positive or zero).

      argument is optional and by default is defined as the largest
      allowed integer type supported by the currently selected RDBMS

  "bool"

      BOOL has no arguments and holds TRUE or FALSE.
      
      it is defined as shortest possible integer and value of 0 means FALSE
      and value of 1 means TRUE. all values above 1 are converted to 1.
  
  "real"

      REAL takes one argument, combined precision and scale as follows:
      
      precision.scale
      
      "precision" is the maximum full count of all significant digits
      (including the fraction part).
      
      "scale" is maximum allowed digit count in the fraction part
      (i.e. after the decimal dot)
      
      examples:
      
      10.5   -- allow 10 digit numbers, of which fraction can be max 5
      22     -- allow 22 digits, without fraction part
      .5     -- allow 18+5 significant digits, with 5 in the fraction part
      
      argument is optional and has default value of 36.18

  "link"
  
      LINK takes two arguments, "linked table name" and "linked field name".
      
      this field holds the ID of the linked record in "linked table name".
      "linked field name" is the field in "linked table name" which will
      be shown on the screen.
      
      example:
      
          =CITY
          
          type  link  cities   name
          
      which means that current field "CITY" holds the ID of the selected
      city from the table "CITIES" and the field "NAME" from table "CITIES" 
      will be show in the place of "CITY".
      
      both arguments are mandatory and have no default value!
  
  "backlink" (can be specified also as "back")
  
      BACKLINK takes two arguments, "backlinked table name" and 
      "backlinked field".
      
      this field is defined as integer and may hold the linked records count
      in the future. however, currently, it has only screen control meaning
      and shows all records from "backlinked table name" with "LINK"-type
      field named "backlinked field", which is linked to the current record.
      
      example:
      
          =ADDRESSES
          
            type  backlink  ADDRESSES   CITY
            
      this field will show a button, which will display all records from 
      the table ADDRESSES, which is linked to the current city (i.e. the
      field CITY links to the current record ID).
     
      NOTE: LINK and BACKLINK are the two sides of a link between two tables.
      BACKLINKs must always point to LINK-type field in the remote table.       

  "widelink" (can be specified also as "wide")
  
      WIDELINK does not have arguments.
      
      this field is defined as char/text field and holds link to any record
      in the database! it has table name, id and (optional) field to which
      it links.
      
      WIDELINKs are read-only types and can be written only by methods.
      no user interface for managing them exists except view and edit on
      the linked record.
      
      example:
      
          =SOURCE_THING
          
            type  widelink
            
      this field will show all LINK buttons depending on permissions
      (usually just view button and edit button if there is permission
      to edit the linked record but it can show file upload/download
      buttons if linked to FILE type table).
     
      NOTE: LINK and WIDELINK are essentially the same thing but the
      linked table name appears respectively in the table description
      or the WIDELINK field database data.
      
      there are WIDELINK specific API to read and write:
      
          use Decor::Shared::Types;
      
          # for "constructing" WIDELINK database data:
          my $database_data = type_widelink_construct( $table, $id, $field );
          
          # to parse WIDELINK database data:
          my ( $table, $id, $field ) = type_widelink_parse( $database_data );
          
          type_widelink_parse() will raise and exception if $database_data
          is not properly constructed WIDELINK data. if you do not wish
          to have an exception here you can use type_widelink_parse2() which
          will return empty array or undef if there is an error.
          
          Records has own API, which uses the one above:
          
          use Decor::Core::DB::Record;
          
          $rec->write_widelink( $wl_field, $link_table, $link_id, $link_field);
          
          my ( $linked_table, $linked_id, $linked_field ) =
                                             $rec->read_widelink( $wl_field );
                                             
          my $widelink_hashref = $rec->read_widelink( $wl_field );
          # $widelink_hashref hash will have TABLE, ID and FIELD keys
          
  
  "date"
  
      DATE has no arguments and holds calendar date.
      
      it is defined as integer and holds "Julian Date". it is converted to 
      human readable form only for user screens as "year.months.day".

      if "day" is ommited it is considered 1st of the month.
      if "month" is omitted it is considered January.
  
  "time"

      DATE has no arguments and holds time.
      
      it is defined as integer and holds number of seconds. it can be used
      as day time or any time period. its user readable form is 
      "hour:minutes:seconds".

  "utime"

      UTIME has no arguments and holds date+time timestamp.
      
      it is defined as integer and holds UNIX time (number of seconds since
      the Epoch, 1970-01-01 00:00:00 +0000 UTC). its human readable form
      combines date and time. on user input, time can be omitted and 
      assumed 00:00:00. 
      if day is ommited it is considered 1st of the month.
      if month is omitted it is considered January.


  ============================================================================
  FORMATTING AND REVERTING TO INTERNAL DATA
  ============================================================================
  
  All types are processed and stored in internal format. For printing and
  presenting data to the users (printable or human readable format), 
  type_format() function must be used:
  
      use Decor::Shared::Types;

      # set default formats for UTIME and DATE
      type_set_format( { NAME => 'UTIME' }, 'DMY24Z' );
      type_set_format( { NAME => 'DATE'  }, 'DMY' );

      my $now = Time::HiRes::time();
      my $now_print  = type_format( $now,  { NAME => 'UTIME' } ); # current TZ
      my $gmt_print  = type_format( $now,  { NAME => 'UTIME', TZ => 'GMT' } );
      my $eet_print  = type_format( $now,  { NAME => 'UTIME', TZ => 'EET' } );

      my $date_print = type_format( $date, { NAME => 'DATE' } );
      my $time_print = type_format( $time, { NAME => 'TIME' } );

  Currently only UTIME, DATE and TIME has internal formats, which are 
  different than the printable formats. However REAL type can have table
  field definition, which specifies fixed scale (positions after decimal 
  point) so it also needs formatting.

  There is further step in formatting, which adds additional human readable
  details as thousands separators for REAL and INT numbers:
  
  my $human = type_format_human( 12345678.9, { NAME => 'REAL', DOT => 4 } );
  # $human will be 12`345`678.9000
  
  Printable and human printable formats can be reverted to the internal data
  representation with type_revert() function:
  
      my $time  = type_revert( '11:44 pm',  { NAME => 'TIME' } );
      my $date  = type_revert( '14.3.2016', { NAME => 'DATE' } );
      my $utime = type_revert( '1.3.2016 11:11 pm +0200', { NAME => 'UTIME' } );
      
  Formatting and reverting to and from representations for UTIME, DATE and 
  TIME types allow specifying exact formatting for year, month, date, hour and
  time zone. Available formatting are:
  
      'DATE' => 'DMY'
                'MDY'
                'YMD'

      'TIME' => '24H'
                '12H'
                
     'UTIME' => 'DMY24'
                'MDY24'
                'YMD24'
                'DMY12'
                'MDY12'
                'YMD12'
                'DMY24Z'
                'MDY24Z'
                'YMD24Z'
                'DMY12Z'
                'MDY12Z'
                'YMD12Z'

  Default formats are:
   
      'DATE'  => 'YMD',
      'TIME'  => '24H',
      'UTIME' => 'YMD24Z',
   
  Default formats can be changed:
  
      type_set_format( { NAME => 'UTIME' }, 'DMY24Z' );
      type_set_format( { NAME => 'DATE'  }, 'DMY' );
      type_set_format( { NAME => 'TIME'  }, '12H' );

  and also be reset to defaults:
  
      type_reset_formats();
      
  Current format can be acquired with:
  
      my $utime_fmt = type_get_format( { NAME => 'UTIME' } );
      my $date_fmt  = type_get_format( { NAME => 'DATE'  } );
      my $time_fmt  = type_get_format( { NAME => 'TIME'  } );
      
  On formatting and reverting, default forms are used but can be overriden:
  
      my $print = type_format( $now,  { NAME => 'UTIME', FMT => 'DMY24H' } );
      my $print = type_format( $date, { NAME => 'DATE',  FMT => 'DMY'    } );
      my $print = type_format( $time, { NAME => 'TIME',  FMT => '12H'    } );
      
      my $time  = type_revert( '11:44 pm',  { NAME => 'TIME', FMT => '12H' } );
      my $time  = type_revert( '23:44',     { NAME => 'TIME', FMT => '24H' } );
      my $date  = type_revert( '14.3.2016', { NAME => 'DATE', FMT => 'DMY' } );
      
      type_revert( '2016.1.3 11:11 pm +0200', { NAME => 'UTIME', FMT => 'YMD12H' } );

  ============================================================================
  CONVERTING BETWEEN TYPES
  ============================================================================

  Some data types can be converted between:
  
  UTIME to DATE
  UTIME to TIME
  DATE  to UTIME
  
  with the following functions:
  
      # $tz timezone is optional and current one will be used if omitted
      my $time  = type_utime2time( $utime, $tz ); 
      my $date  = type_utime2date( $utime, $tz );
      my $utime = type_date2utime( $date,  $tz );
  
  Conversion happens in the internal representation so no human formatting
  specification is required (i.e. YMD, 12H, DMY24H, etc.)
  
  UTIME types also can be split to DATE and TIME parts:
  
      # $tz timezone is optional and current one will be used if omitted
      my ( $date, $time ) = type_utime_split( $now, $tz );

  and also DATE and TIME can be merged to UTIME:
  
      # $tz timezone is optional and current one will be used if omitted
      my $utime = type_utime_merge( $date, $time, $tz );
  

  ============================================================================
  EOF
  ============================================================================
